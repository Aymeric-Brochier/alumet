---
name: "Create the release"

on:
  release:
    types: ["published"]
  workflow_dispatch:

concurrency:
  group: "release-workflow"
  cancel-in-progress: true

jobs:
  gather-informations:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_tags.outputs.VERSION }}
      release: ${{ steps.get_tags.outputs.RELEASE }}
      tag: ${{ steps.get_tags.outputs.TAG }}
    steps:
      - name: Get the latest release and list artifacts
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            // Retrieve the latest release
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Retrieve informations from the latest release
            const assets = latestRelease.data.assets.map(asset => asset.name);
            let version = latestRelease.data.tag_name.replace(/^v/i, '');
            let release = 1;
            if (assets.length === 0) {
              core.notice("No artifacts attached to the latest release. Using 1 as release number.");
            } else {
              const firstAsset = assets[0]; // Retrieve first element of the list
              const regex = /([0-9.]{3,})-([0-9]+)/;
              const match = firstAsset.match(regex);
              release = match ? match[2] : ''; // Retrieve the last release version using artifact name
              if (release !== '') {
                release = (parseInt(release) + 1).toString();
              } else {
                release = 1;
              }
            }

            // Set as output all necessary values
            core.setOutput("release", release);
            core.setOutput("version", version);
            core.setOutput("tag", latestRelease.data.tag_name);

      - name: Get version and release Tag
        id: get_tags
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RELEASE=${{ steps.get_latest_release.outputs.release }}
            TAG=${{ steps.get_latest_release.outputs.tag }}
            if [ -z ${{ steps.get_latest_release.outputs.version }} ]; then
              VERSION=${TAG#v}
            else
              VERSION=${{ steps.get_latest_release.outputs.version }}
            fi
          else
            RELEASE=1
            TAG=${{ github.event.release.tag_name }}
            VERSION=${TAG#v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE=$RELEASE" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

  build-rpm:
    needs: gather-informations
    uses: alumet-dev/packaging/.github/workflows/build_rpm.yaml@main
    strategy:
      fail-fast: false
      matrix: 
        arch: [x86_64, aarch64]
    with:
      arch: ${{ matrix.arch }}
      version: ${{ needs.gather-informations.outputs.version }}
      release-version: ${{ needs.gather-informations.outputs.release }}
      tag: ${{ needs.gather-informations.outputs.tag }}

  build-deb:
    needs: gather-informations
    uses: alumet-dev/packaging/.github/workflows/build_deb.yaml@main
    strategy:
      fail-fast: false
      matrix: 
        arch: [x86_64, aarch64]
    with:
      arch: ${{ matrix.arch }}
      version: ${{ needs.gather-informations.outputs.version }}
      revision: ${{ needs.gather-informations.outputs.release }}
      tag: ${{ needs.gather-informations.outputs.tag }}

  build-docker:
    needs:
      - gather-informations
      - build-rpm
      - build-deb
    uses: alumet-dev/packaging/.github/workflows/build_docker.yaml@main
    strategy:
      fail-fast: false
      matrix: 
        arch: [x86_64, aarch64]
    with:
      arch: ${{ matrix.arch }}
      version: ${{ needs.gather-informations.outputs.version }}
      release-version: ${{ needs.gather-informations.outputs.release }}

  attach-artifacts:
    permissions:
      actions: read
      contents: write
    needs:
      - build-rpm
      - build-deb
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          pattern: '**/*.rpm'
          path: ./rpm
      
      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          pattern: '**/*.deb'
          path: ./deb

      - name: Create new release
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rpm/**/*.rpm
            deb/**/*.deb

      - name: Update release, deleting old artifacts
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: get_latest_release_and_delete_old_artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            let id = latestRelease.data.id;
            let tag = latestRelease.data.tag_name;

            const assets = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: id
            });

            for (const asset of assets.data) {
                if ( asset.name.endsWith(".deb") || asset.name.endsWith(".rpm")) {
                  await github.rest.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
              }
            }
            console.log(`Release tag: ${tag}`);
            core.setOutput("release_tag", tag);

      - name: Upload RPM artifacts to github release
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          find rpm -type f | xargs -I {} gh release upload ${{ steps.get_latest_release_and_delete_old_artifacts.outputs.release_tag }} {};
          find deb -type f | xargs -I {} gh release upload ${{ steps.get_latest_release_and_delete_old_artifacts.outputs.release_tag }} {};

  push-docker:
    permissions:
      actions: read
      packages: write
    needs:
      - build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Create docker artifacts directory
        run: mkdir docker-artifacts

      - name: Download docker images artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "**/*.docker.tar"
          path: ./docker-artifacts
          merge-multiple: true
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images with multi-arch support
        run: |
          tars=$(find ./docker-artifacts -type f)
          declare -A base_to_arch_map
          for tar in $tars
            do
              image_tags=$(docker load -q -i $tar | sed 's/Loaded image: //g')
              for image_tag in $image_tags
                do
                  docker push $image_tag
                  # Prepare to create the multi-arch manifest
                  base_tag="${image_tag%_aarch64}"
                  base_tag="${base_tag%_x86_64}"
                  arch="${image_tag#$base_tag}"
                  arch="${arch#_}"
                  base_to_arch_map["$base_tag"]+="${arch} "
                done
            done
          for base in "${!base_to_arch_map[@]}"; do
            archs=(${base_to_arch_map[$base]})
            echo "Creating multi-arch manifest for: $base with the following archs: ${archs[@]}"
            
            cmd="docker manifest create $base"
            for arch in "${archs[@]}"
              do
                cmd+=" ${base}_${arch}"
              done

            eval "$cmd"
            docker manifest push "$base"

          done


